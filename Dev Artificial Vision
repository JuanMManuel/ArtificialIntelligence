# -*- coding: utf-8 -*-
"""despliegueVision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WNBsmOwYJdgKKI8FKPb6sz4k-DPOEQJK
"""

#Cargamos librerías principales

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt



# Tratamiento de imágenes

from PIL import Image



# Lectura del directorio de imágenes

import os, sys

from tensorflow import keras
model_deep = keras.models.load_model('model_deep.h5')
model_deep.summary()

import pickle
filename='labelencoder.pkl'
labelencoder= pickle.load(open(filename, 'rb'))

# Lectura de la carpeta con las imágenes de perros 

path = "prediccion casas"

files = os.listdir( path )




mat_hist=[] # Matriz con los histogramas

nombres=[] #Nombres de los archivos



# Se leen las imágenes y se calcula el histograma

for f in files:

  if f.endswith('.jpg'):

    #Nombre de la imagen

    print(f)

    nombres.append(f)

    #Leemos la imagen

    img = Image.open(path+'/'+ f)

    img=img.resize((300,300))

    # Calculamos histograma de color

    hist = img.histogram()

    #Adicionamos el histograma a la matriz 

    mat_hist.append(hist)

    

# Data frame con los histogramas

prediccion_casas=pd.DataFrame(mat_hist)

#prediccion_casas['clase']="prediccion_casas"

# Lectura de la carpeta con las imágenes de perros 

path = "prediccion edificios"

files = os.listdir( path )




mat_hist=[] # Matriz con los histogramas

nombres=[] #Nombres de los archivos



# Se leen las imágenes y se calcula el histograma

for f in files:

  if f.endswith('.jpg'):

    #Nombre de la imagen

    print(f)

    nombres.append(f)

    #Leemos la imagen

    img = Image.open(path+'/'+ f)

    img=img.resize((300,300))

    # Calculamos histograma de color

    hist = img.histogram()

    #Adicionamos el histograma a la matriz 

    mat_hist.append(hist)

    

# Data frame con los histogramas

prediccion_edificios=pd.DataFrame(mat_hist)

#prediccion_edificios['clase']="prediccion_edificios"

#Unimos los dos conjuntos de datos

data = pd.concat([prediccion_casas, prediccion_edificios], axis=0)

data

#Predicción de datos futuros

Y_fut = model_deep.predict(data) 

Y_fut

Y_fut=np.argmax(Y_fut, axis=1)
print(Y_fut)

print(labelencoder.inverse_transform(Y_fut))

