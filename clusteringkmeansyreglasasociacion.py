# -*- coding: utf-8 -*-
"""clusteringKmeansYReglasAsociacion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-0v-OaKyl3CTSuV0oyAJUziFzCFf7b0W

#Clustering Titanic

1. Preparacionde datos
2. Aprendizaje del Modelo
3. Evaluacion del Modelo
4. Perfilamiento
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""1. Preparacion de Datos"""

data=pd.read_csv("titanic.csv", sep=",")
data.head()

data.info()

#Corrección del tipo de datos object a categorías

data['Clase']=data['Clase'].astype('category')

data['Edad']=data['Edad'].astype('category')

data['Sexo']=data['Sexo'].astype('category')

data['Sobrevivio']=data['Sobrevivio'].astype('category')

data.info()

data.describe()

data['Clase'].value_counts().plot(kind='bar')

data['Edad'].value_counts().plot(kind='barh')

data['Sobrevivio'].value_counts().plot(kind='pie')

data['Sexo'].value_counts().plot(kind='bar')

data=pd.get_dummies(data, columns=['Clase'],drop_first=False)
data=pd.get_dummies(data, columns=['Edad', 'Sexo', 'Sobrevivio'],drop_first=True)
data.head()

"""#2 Aprendizaje Modelo"""

from sklearn.cluster import KMeans 

#Método del codo para encontrar la mejor cantidad de clusters 

ks = range(1, 20) # crear valores del 1 al 20

inertias = []



for k in ks:

    # Crear  modelo

    model = KMeans(n_clusters=k)

    model.fit(data)

    inertias.append(model.inertia_)

    

# Graficar cantidad de clusters vs inertias

plt.plot(ks, inertias, '-o')

plt.xlabel('Numero de clusters, k')

plt.ylabel('inertia')

plt.xticks(ks)

plt.show()

from sklearn.cluster import KMeans
k=8
model=KMeans(n_clusters=k,max_iter=100)
model.fit(data)

"""#3. Evaluacion del Modelo"""

#Evaluacion del Modelo
from sklearn import metrics


print(model.inertia_)


dv=metrics.davies_bouldin_score(data,model.labels_) #Indice DB: cohesion/separabilidad, el optimo es un valor pequeño

print(dv)

sil=metrics.silhouette_score(data, model.labels_) #Indice de silueta:  el optimo es (0.5-1)

print(sil)

"""#4. Perfilamiento"""

model.cluster_centers_

#Centroides de los clusters

centroides=pd.DataFrame(model.cluster_centers_, columns=data.columns.values)

centroides.round(0)

data['cluster']=model.labels_
data.head()

pd.value_counts(data["cluster"]).plot(kind='pie')

#Correlaciones

data.corr()

import seaborn as sns

sns.heatmap(data.corr(),annot=True)

"""# Reglas de Asociacion

"""

#Debemos instalar el paquete para el algoritmo apriori

!pip install -q apyori

from apyori import apriori



reglas=apriori(data.values, min_support=0.1, min_confidence=0.6)

reglas=list(reglas)

reglas

reglas = pd.DataFrame(reglas)

reglas